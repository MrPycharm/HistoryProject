import csv
from PyQt5 import uic
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow
from PyQt5.QtGui import QPainter, QColor, QFont
from PyQt5.QtCore import Qt
import sqlite3


class History(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('project3.ui', self)
        self.pushButton.clicked.connect(self.open_add_form)
        self.pushButton.show()
        self.pushButton_4.clicked.connect(self.open_del_form)
        self.pushButton_4.show()
        self.pushButton_Roles.clicked.connect(self.open_roles_form)
        self.pushButton_Roles.show()
        self.pushButton_run.clicked.connect(self.open_main_form)
        self.pushButton_run.show()
        self.pushButton_csv.clicked.connect(self.open_csv_form)
        self.pushButton_csv.show()

    def open_add_form(self):
        # добавление вручную
        self.add_form = Add_manualy()
        self.add_form.show()

    def open_del_form(self):
        # удаление по имени
        self.del_form = Delete()
        self.del_form.show()

    def open_roles_form(self):
        # добавляем/удаляем роль
        self.roles_form = Roles()
        self.roles_form.show()

    def open_main_form(self):
        # вывод информации
        self.main_form = TimelineWindow()
        self.main_form.show()

    def open_csv_form(self):
        # добавление через csv файл
        self.csv_form = Add_csv()
        self.csv_form.show()


class Add_manualy(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('projectNo2.ui', self)
        self.show()
        #  список ролей
        self.con = sqlite3.connect('HistoryProject.sqlite')
        cur = self.con.cursor()
        self.comboBox.addItems(
            [item[0] for item in cur.execute("SELECT description FROM roles").fetchall()])

        self.buttonOK.clicked.connect(self.scan)
        self.buttonCancel.clicked.connect(self.cancelw)

    def cancelw(self):
        self.close()

    def scan(self):
        input_name, input_start, input_end, input_role = self.lineEdit.text(), int(self.lineEdit_2.text()), \
                                                         int(self.lineEdit_3.text()), self.comboBox.currentText()
        # получение всё информации
        self.add_manly(input_name, input_start, input_end, input_role)

    def add_manly(self, name, start, end, role):
        conn = sqlite3.connect('HistoryProject.sqlite')
        cursor = conn.cursor()
        a = cursor.execute(f"SELECT id FROM roles WHERE '{role}' == description").fetchall()[0][0]
        # достаём из roles id роли
        conn.commit()
        conn.close()

        conn = sqlite3.connect('HistoryProject.sqlite')
        cursor2 = conn.cursor()
        sql = "INSERT INTO object (name, start, end, role_id) VALUES (?, ?, ?, ?)"
        values = (name, start, end, a)
        # добавляем в object
        cursor2.execute(sql, values)
        conn.commit()
        conn.close()


class Add_csv(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('csv_window.ui', self)
        self.buttonOK_csv.clicked.connect(self.scan_csv)
        self.buttonCancel_csv.clicked.connect(self.cancel_csv)

    def cancel_csv(self):
        self.close()

    def scan_csv(self):
        file = self.lineEdit_csv.text()
        with open(f'{file}.csv', 'r') as f:
            reader = csv.reader(f, delimiter=';')
            print(reader)
            for row in reader:
                # построчно считываем информацию
                name_csv, start_csv, end_csv, role_csv = row[:-1]
                con_csv = sqlite3.connect('HistoryProject.sqlite')
                cursor_csv = con_csv.cursor()

                if not role_csv.isdigit():
                    # select роли(название)
                    a = cursor_csv.execute(f"SELECT * FROM roles WHERE description == '{role_csv}' ").fetchall()
                else:
                    # select роли(id)
                    a = cursor_csv.execute(f"SELECT * FROM roles WHERE id == '{role_csv}' ").fetchall()

                if not a:
                    # если нет такой роли
                    cursor_csv.execute("INSERT INTO roles (description, color) VALUES (?, ?)", (role_csv, row[-1]))
                    # добавление роли в roles

                b = cursor_csv.execute(f"SELECT id FROM roles WHERE description == '{role_csv}'").fetchall()[0][0]
                values = (name_csv, start_csv, end_csv, b)
                # добавляем в objects
                cursor_csv.execute("INSERT INTO object (name, start, end, role_id) VALUES (?, ?, ?, ?)", values)
                con_csv.commit()
                con_csv.close()

        # вывод информации
        outputt = "Получилось"
        self.info_csv.setFont(QFont("Arial", 12))
        self.info_csv.setText(outputt)
        self.info_csv.setStyleSheet("color: #02ff74")


class Roles(QMainWindow):  # добавление/удаление роли
    def __init__(self):
        super().__init__()
        uic.loadUi('roles.ui', self)
        self.show()
        self.buttonOK_role.clicked.connect(self.edit_role)
        self.buttonCancel_role.clicked.connect(self.cancel)

    def cancel(self):
        self.close()

    def edit_role(self):
        role = self.lineEdit_role.text()
        con_role = sqlite3.connect("HistoryProject.sqlite")
        cur_role = con_role.cursor()

        # проверка на наличие роли
        inp = f"SELECT * FROM roles WHERE description == '{role}' "
        check = cur_role.execute(inp).fetchall()
        # print(check)

        if check:
            cur_role.execute(f"""DELETE FROM roles WHERE description = '{role}' """)
        else:
            # добавляем роль, если её нет в roles
            color_role = self.lineEdit_role_color.text()
            cur_role.execute("INSERT INTO roles (description, color) VALUES (?, ?)", (role, color_role))

        con_role.commit()
        con_role.close()


class Delete(QMainWindow):  # удаление по имени
    def __init__(self):
        super().__init__()
        uic.loadUi('del.ui', self)
        self.show()
        self.buttonOK_2.clicked.connect(self.delete_by_name)
        self.buttonCancel_2.clicked.connect(self.cancel)

    def cancel(self):
        self.close()

    def delete_by_name(self):
        name = str(self.lineEdit_enter.text())
        conn = sqlite3.connect("HistoryProject.sqlite")
        cur = conn.cursor()

        # удаление по имени из object
        test = cur.execute(f"""SELECT * FROM object WHERE name == '{name}' """).fetchall()
        cur.execute(f"""DELETE FROM object WHERE name = '{name}' """)
        conn.commit()
        conn.close()
        if test:
            self.info.setText("Выполнено")
        else:
            self.info.setText("Ошибка, попробуйте снова")

        self.info.setFont(QFont("Arial", 12))
        self.info.setStyleSheet("color: #02ff74")


class TimelineWindow(QMainWindow):  # вывод информации (main)
    def __init__(self):
        super().__init__()
        # создание поля (фона)
        self.setWindowTitle("Timeline")
        self.setGeometry(100, 100, 800, 600)
        self.setStyleSheet("background-color: rgb(217, 217, 211);")
        self.show()

    def paintEvent(self, event):
        qp = QPainter(self)
        qp.setPen(Qt.black)

        conn = sqlite3.connect('HistoryProject.sqlite')
        cursor = conn.cursor()

        # получение названия ролей из roles
        cursor.execute("SELECT description FROM roles")
        roles_data = cursor.fetchall()
        cursor.execute("SELECT name, start, end, role_id FROM object")
        # получение всей информации из object
        objects_data = cursor.fetchall()
        conn.close()

        font = QFont("Arial", 10)
        qp.setFont(font)

        timeline_start = 1800  # timeline start year
        timeline_end = 2023  # timeline end year

        timeline_width = self.width() - 50
        timeline_height = 30
        bar_width = timeline_width / (timeline_end - timeline_start + 1)

        storage = {}  # создание словаря для хранения границ объектов
        for obj in objects_data:
            name, start, end, role_id = obj
            con_r = sqlite3.connect('HistoryProject.sqlite')
            cursor_r = con_r.cursor()
            colour = cursor_r.execute(f"SELECT color FROM roles WHERE id == '{role_id}' ").fetchall()[0][0].split(',')
            role_color = QColor(int(colour[0]), int(colour[1]), int(colour[2]))
            con_r.close()

            # подготовка к рисованию
            x_start = int((start - timeline_start) * bar_width) + 50
            x_end = int((end - timeline_start) * bar_width) + 50

            qp.setBrush(role_color)
            qp.setPen(Qt.white)

            # функция for для получения нужной строчки (так, чтобы информация друг на друга не наслаивалась)
            flag = False
            for key, coords in storage.items():
                if flag:
                    break
                for tupl in coords:
                    if tupl[0] < start < tupl[1] or tupl[0] < end < tupl[1] or start < tupl[0] and end > tupl[1]:
                        # проверка границ
                        break
                else:  # если программа проработала нормально, т.е. ни в одном случае границы не пересекаются, то:
                    qp.drawRect(x_start, key // 2 - 10, x_end - x_start, 20)
                    qp.drawText(x_start, key // 2 - 10, x_end - x_start, 20, Qt.AlignCenter, name)
                    storage[key].append((start, end))
                    # добавление границ в storage
                    flag = True
                    break
            else:
                if storage:
                    # переход на новую строку
                    height = max(storage.keys()) + 45
                    qp.drawRect(x_start, height // 2 - 10, x_end - x_start, 20)
                    qp.drawText(x_start, height // 2 - 10, x_end - x_start, 20, Qt.AlignCenter, name)
                    storage[height] = [(start, end)]
                else:
                    # storage пуст  -  происходит один раз в самом начале
                    qp.drawRect(x_start, timeline_height // 2 - 10, x_end - x_start, 20)
                    qp.drawText(x_start, timeline_height // 2 - 10, x_end - x_start, 20, Qt.AlignCenter, name)
                    storage[timeline_height] = [(start, end)]


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = History()
    ex.show()
    sys.exit(app.exec())
