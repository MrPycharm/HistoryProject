import sqlite3
import sys

from PyQt5 import uic
from PyQt5.QtGui import QFont, QBrush, QColor
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QDialog, QLineEdit, QGraphicsView

from PyQt5.QtWidgets import QApplication, QMainWindow, QGraphicsScene, QGraphicsView
from PyQt5.QtGui import QColor, QBrush, QFont
from PyQt5.QtCore import Qt
import sqlite3


class History(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('project3.ui', self)
        # self.a = QPushButton("а", self)
        self.pushButton.clicked.connect(self.open_add_form)
        # self.a.clicked.connect(self.open_add_form)
        self.pushButton.show()
        self.pushButton_4.clicked.connect(self.open_del_form)
        self.pushButton_4.show()
        self.pushButton_Roles.clicked.connect(self.open_roles_form)
        self.pushButton_Roles.show()
        self.pushButton_run.clicked.connect(self.open_main_form)
        self.pushButton_run.show()

    def open_add_form(self):
        self.add_form = Add_manualy()
        self.add_form.show()

    def open_del_form(self):
        self.del_form = Delete()
        self.del_form.show()

    def open_roles_form(self):
        self.roles_form = Roles()
        self.roles_form.show()

    def open_main_form(self):
        self.main_form = TimelineWidget()
        self.main_form.show()


class Add_manualy(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('projectNo2.ui', self)
        self.show()
        #  список ролей
        self.con = sqlite3.connect('HistoryProject.sqlite')
        cur = self.con.cursor()
        self.comboBox.addItems(
            [item[0] for item in cur.execute("SELECT description FROM roles").fetchall()])

        self.buttonOK.clicked.connect(self.scan)
        self.buttonCancel.clicked.connect(self.cancelw)

    def cancelw(self):
        self.close()

    def scan(self):
        input_name, input_start, input_end, input_role = self.lineEdit.text(), int(self.lineEdit_2.text()), \
                                                         int(self.lineEdit_3.text()), self.comboBox.currentText()
        # print(input_name, input_start, input_end, input_role)
        self.add_manly(input_name, input_start, input_end, input_role)

    def add_manly(self, name, start, end, role):
        # print("дошёл")
        conn = sqlite3.connect('HistoryProject.sqlite')
        cursor = conn.cursor()
        # idid = f"SELECT id FROM roles WHERE '{role}' == description"
        a = cursor.execute(f"SELECT id FROM roles WHERE '{role}' == description").fetchall()[0][0]
        # print(a)
        conn.commit()
        conn.close()

        conn = sqlite3.connect('HistoryProject.sqlite')
        cursor2 = conn.cursor()
        sql = "INSERT INTO object (name, start, end, role_id) VALUES (?, ?, ?, ?)"
        values = (name, start, end, a)
        cursor2.execute(sql, values)
        conn.commit()
        conn.close()


class Delete(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('del.ui', self)
        self.show()
        self.buttonOK_2.clicked.connect(self.delete_by_name)
        self.buttonCancel_2.clicked.connect(self.cancel)

    def cancel(self):
        self.close()

    def delete_by_name(self):
        name = str(self.lineEdit_enter.text())
        conn = sqlite3.connect("HistoryProject.sqlite")
        cur = conn.cursor()

        cur.execute(f"""DELETE FROM object WHERE name = '{name}' """)
        conn.commit()
        conn.close()
        self.info.setFont(QFont("Arial", 12))
        self.info.setText("выполнено")
        self.info.setStyleSheet("color: #02ff74")


class Roles(QMainWindow):
    def __init__(self):
        super().__init__()
        uic.loadUi('roles.ui', self)
        self.show()
        self.buttonOK_role.clicked.connect(self.edit_role)
        self.buttonCancel_role.clicked.connect(self.cancel)

    def cancel(self):
        self.close()

    def edit_role(self):
        role = self.lineEdit_role.text()
        con_role = sqlite3.connect("HistoryProject.sqlite")
        cur_role = con_role.cursor()

        # проверка на наличие роли
        inp = f"SELECT * FROM roles WHERE description == '{role}' "
        check = cur_role.execute(inp).fetchall()
        print(check)

        if check:
            cur_role.execute(f"""DELETE FROM roles WHERE description = '{role}' """)
        else:
            color_role = self.lineEdit_role_color.text()
            cur_role.execute("INSERT INTO roles (description, color) VALUES (?, ?)", (role, color_role))

        # try:
        #     cur_role.execute(f"""DELETE FROM roles WHERE description = '{role}' """)
        #
        # except:
        #     print("______")
        #     color_role = self.lineEdit_role_color.text()
        #     cur_role.execute("INSERT INTO roles (description, color) VALUES (?, ?)", (role, color_role))

        con_role.commit()
        con_role.close()


'''def goog(arg):                       пример
    print(f"It's work! {arg}")'''


class TimelineWidget(QMainWindow):
    def __init__(self):
        super(TimelineWidget, self).__init__()
        self.setGeometry(100, 100, 800, 500)
        self.setWindowTitle("Timeline Widget")

        self.scene = QGraphicsScene()

        # Connect to the SQLite database
        self.conn = sqlite3.connect("History Project.sqlite")
        self.cursor = self.conn.cursor()

        self.setup_timeline()

    def setup_timeline(self):
        # Get data from the database
        self.cursor.execute("SELECT * FROM objects")
        objects = self.cursor.fetchall()

        self.cursor.execute("SELECT * FROM roles")
        roles = self.cursor.fetchall()

        # Set up timeline parameters
        timeline_width = 700
        timeline_height = 400
        start_year = 1900
        end_year = 2022
        year_step = 10

        # Calculate timeline scaling factors
        year_range = end_year - start_year
        pixels_per_year = timeline_width / year_range

        # Draw timeline background
        self.scene.addRect(0, 0, timeline_width, timeline_height, Qt.white)

        # Draw timeline labels
        for year in range(start_year, end_year + 1, year_step):
            x = (year - start_year) * pixels_per_year
            self.scene.addText(str(year), QFont("Arial", 8)).setPos(x - 10, timeline_height + 5)

        # Draw date plates
        for obj in objects:
            name = obj[1]
            start_date = obj[2]
            end_date = obj[3]
            role_id = obj[4]

            # Get the color for the role
            role_color = self.get_role_color(role_id, roles)

            # Calculate the position and width of the date plate
            start_x = (start_date.year - start_year) * pixels_per_year
            end_x = (end_date.year - start_year) * pixels_per_year
            width = max(1, end_x - start_x)

            # Create the date plate rectangle
            date_plate = self.scene.addRect(start_x, 50, width, 50, Qt.white)
            date_plate.setBrush(QBrush(role_color))
            name_label = self.scene.addText(name, QFont("Arial", 8))
            name_label.setPos(start_x, 100)

        # Create the graphics view and set the scene
        self.timeline_view = QGraphicsView(self.scene, self)
        self.timeline_view.setGeometry(50, 50, timeline_width, timeline_height)

    def get_role_color(self, role_id, roles):
        for role in roles:
            if role[0] == role_id:
                return QColor(role[1])
        return QColor(Qt.gray)




if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = History()
    ex.show()
    sys.exit(app.exec())
